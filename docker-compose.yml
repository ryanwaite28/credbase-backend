version: "3.8"




volumes:

  jenkins_vol:
    driver: local
  rabbitmq_db:
    driver: local
  rabbitmq_config:
    driver: local
  users_db:
    driver: local
  authorities_db:
    driver: local


services:

  # QA - CI/CD

  jenkins:
    image: jenkins
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - jenkins_vol:/var/jenkins_home



  # Message broker

  rabbitmq:
    image: rabbitmq:3.11-management
    hostname: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_db:/var
      - rabbitmq_config:/etc



  # Databases

  users-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5430:5432'
    volumes: 
      - users_db:/var/lib/postgresql/data

  authorities-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5430:5432'
    volumes: 
      - authorities_db:/var/lib/postgresql/data


  
  # Gateways

  web-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/web/web.gateway.ts
        APP_FILE_NAME: web.gateway.js
    ports:
      - '3000:80'
    command: npm run webpack -- --watch --env entry=gateways/web/web.gateway.ts --env app=web.gateway.js --env dir=web-gw
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules
    


  # Microservices

  users-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/users/users.microservice.ts
        APP_FILE_NAME: users.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/users/users.microservice.ts --env app=users.microservice.js --env dir=users-ms
    # command: npm run start-watch build/users.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: USERS_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@users-db:5432 
    depends_on:
      - rabbitmq
      - users-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  authorities-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/authorities/authorities.microservice.ts
        APP_FILE_NAME: authorities.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/authorities/authorities.microservice.ts --env app=authorities.microservice.js --env dir=authorities-ms
    # command: npm run start-watch build/authorities.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: AUTHORITIES_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@authorities-db:5432 
    depends_on:
      - rabbitmq
      - authorities-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  emails-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/emails/emails.microservice.ts
        APP_FILE_NAME: emails.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/emails/emails.microservice.ts --env app=emails.microservice.js --env dir=emails-ms --env static=microservices/emails/static
    # command: npm run start-watch build/emails.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: EMAILS_MICROSERVICE
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules

