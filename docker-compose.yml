version: "3.8"




volumes:

  jenkins-vol:
    driver: local

  rabbitmq-db:
    driver: local
  rabbitmq-config:
    driver: local

  # Databases
  users-db:
    driver: local
  authorities-db:
    driver: local
  assets-db:
    driver: local
  items-db:
    driver: local
  storage-db:
    driver: local
  developer-db:
    driver: local
  stripe-db:
    driver: local


services:

  # QA - CI/CD

  jenkins:
    image: jenkins
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - jenkins-vol:/var/jenkins_home



  # Message broker

  rabbitmq:
    image: rabbitmq:3.11-management
    hostname: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq-db:/var
      - rabbitmq-config:/etc



  # Databases

  users-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5430:5432'
    volumes: 
      - users-db:/var/lib/postgresql/data

  authorities-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5431:5432'
    volumes: 
      - authorities-db:/var/lib/postgresql/data

  assets-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5433:5432'
    volumes: 
      - assets-db:/var/lib/postgresql/data

  items-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5434:5432'
    volumes: 
      - items-db:/var/lib/postgresql/data

  storage-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5435:5432'
    volumes: 
      - storage-db:/var/lib/postgresql/data

  developer-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5436:5432'
    volumes: 
      - developer-db:/var/lib/postgresql/data

  stripe-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5437:5432'
    volumes: 
      - stripe-db:/var/lib/postgresql/data


  
  # Gateways

  web-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/web/web.gateway.ts
        APP_FILE_NAME: web.gateway.js
    ports:
      - '3000:80'
    command: npm run webpack -- --watch --env entry=gateways/web/web.gateway.ts --env app=web.gateway.js --env dir=web-gw
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules

  mobile-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/mobile/mobile.gateway.ts
        APP_FILE_NAME: mobile.gateway.js
    ports:
      - '3000:80'
    command: npm run webpack -- --watch --env entry=gateways/mobile/mobile.gateway.ts --env app=mobile.gateway.js --env dir=mobile-gw
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules

  developer-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/developer/developer.gateway.ts
        APP_FILE_NAME: developer.gateway.js
    ports:
      - '3000:80'
    command: npm run webpack -- --watch --env entry=gateways/developer/developer.gateway.ts --env app=developer.gateway.js --env dir=developer-gw
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules
    


  # Microservices

  users-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/users/users.microservice.ts
        APP_FILE_NAME: users.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/users/users.microservice.ts --env app=users.microservice.js --env dir=users-ms
    # command: npm run start-watch build/users.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: USERS_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@users-db:5432 
    depends_on:
      - rabbitmq
      - users-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  authorities-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/authorities/authorities.microservice.ts
        APP_FILE_NAME: authorities.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/authorities/authorities.microservice.ts --env app=authorities.microservice.js --env dir=authorities-ms
    # command: npm run start-watch build/authorities.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: AUTHORITIES_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@authorities-db:5432 
    depends_on:
      - rabbitmq
      - authorities-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  assets-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/assets/assets.microservice.ts
        APP_FILE_NAME: assets.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/assets/assets.microservice.ts --env app=assets.microservice.js --env dir=assets-ms
    # command: npm run start-watch build/assets.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: ASSETS_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@assets-db:5432 
    depends_on:
      - rabbitmq
      - assets-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  items-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/items/items.microservice.ts
        APP_FILE_NAME: items.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/items/items.microservice.ts --env app=items.microservice.js --env dir=items-ms
    # command: npm run start-watch build/items.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: ITEMS_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@items-db:5432 
    depends_on:
      - rabbitmq
      - items-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  storage-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/storage/storage.microservice.ts
        APP_FILE_NAME: storage.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/storage/storage.microservice.ts --env app=storage.microservice.js --env dir=storage-ms
    # command: npm run start-watch build/storage.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: STORAGE_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@storage-db:5432 
    depends_on:
      - rabbitmq
      - storage-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  developer-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/developer/developer.microservice.ts
        APP_FILE_NAME: developer.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/developer/developer.microservice.ts --env app=developer.microservice.js --env dir=developer-ms
    # command: npm run start-watch build/developer.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: DEVELOPER_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@developer-db:5432 
    depends_on:
      - rabbitmq
      - developer-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  stripe-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/stripe/stripe.microservice.ts
        APP_FILE_NAME: stripe.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/stripe/stripe.microservice.ts --env app=stripe.microservice.js --env dir=stripe-ms
    # command: npm run start-watch build/stripe.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: STRIPE_MICROSERVICE
      DATABASE_URL: postgres://postgres:postgres_password@stripe-db:5432 
    depends_on:
      - rabbitmq
      - stripe-db
    volumes:
      - ./src:/app/src
      - /app/node_modules

  emails-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/emails/emails.microservice.ts
        APP_FILE_NAME: emails.microservice.js
    command: npm run webpack -- --watch --env entry=microservices/emails/emails.microservice.ts --env app=emails.microservice.js --env dir=emails-ms --env static=microservices/emails/static
    # command: npm run start-watch build/emails.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_NAME: EMAILS_MICROSERVICE
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      - /app/node_modules

