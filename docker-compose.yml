version: "3.8"


networks:
  splunknet:
    driver: bridge
    attachable: true






volumes:

  # https://splunk.github.io/docker-splunk/STORAGE_OPTIONS.html
  # https://docs.docker.com/config/containers/logging/splunk/
  splunk-config-vol:
    driver: local

  jenkins-vol:
    driver: local

  logging-ms-vol:
    driver: local

  redis-cache-vol:
    driver: local

  rabbitmq-db:
    driver: local
  rabbitmq-config:
    driver: local

  # Databases
  users-db:
    driver: local
  authorities-db:
    driver: local
  assets-db:
    driver: local
  items-db:
    driver: local
  storage-db:
    driver: local
  developer-db:
    driver: local
  stripe-db:
    driver: local






services:

  # Logging / Analytics

  splunk:
    networks:
      splunknet:
        aliases:
          - so1
    image: splunk/splunk
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=Admin123
      - DEBUG=true
    ports:
      - '8000:8000'
    volumes:
      - logging-ms-vol:/var/log
      - splunk-config-vol:/opt/splunk/etc







  # QA - CI/CD

  jenkins:
    image: jenkins
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - jenkins-vol:/var/jenkins_home







  # Message broker

  rabbitmq:
    image: rabbitmq:3.11-management
    hostname: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq-db:/var
      - rabbitmq-config:/etc




  # Cache
  redis-cache:
    image: redis:latest
    hostname: redis-cache
    command: >
      --requirepass REDIS_PASSWORD
    ports:
      - '6379:6379'
    volumes:
      - redis-cache-vol:/data




  # Databases

  users-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5430:5432'
    volumes: 
      - users-db:/var/lib/postgresql/data

  authorities-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5431:5432'
    volumes: 
      - authorities-db:/var/lib/postgresql/data

  assets-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5433:5432'
    volumes: 
      - assets-db:/var/lib/postgresql/data

  items-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5434:5432'
    volumes: 
      - items-db:/var/lib/postgresql/data

  storage-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5435:5432'
    volumes: 
      - storage-db:/var/lib/postgresql/data

  developer-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5436:5432'
    volumes: 
      - developer-db:/var/lib/postgresql/data

  stripe-db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres_password
    ports:
      - '5437:5432'
    volumes: 
      - stripe-db:/var/lib/postgresql/data


  




  # Gateways

  web-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/web/web.gateway.ts
        APP_FILE_NAME: web.gateway.js
        APP_DIR: web-gw
        APP_STATIC: 
    ports:
      - '3000:80'
    environment:
      APP_MACHINE_NAME: WEB_GATEWAY
      APP_DISPLAY_NAME: Web Gateway
      APP_ENV: LOCAL
      CORS_WHITELIST_ORIGINS: http://localhost:4200,http://localhost:7600
      PORT: 80
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  mobile-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/mobile/mobile.gateway.ts
        APP_FILE_NAME: mobile.gateway.js
        APP_DIR: mobile-gw
        APP_STATIC: 
    ports:
      - '3000:80'
    environment:
      APP_MACHINE_NAME: MOBILE_GATEWAY
      APP_DISPLAY_NAME: Mobile Gateway
      APP_ENV: LOCAL
      PORT: 80
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  developer-gw:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: gateways/developer/developer.gateway.ts
        APP_FILE_NAME: developer.gateway.js
        APP_DIR: developer-gw
        APP_STATIC: 
    ports:
      - '3000:80'
    environment:
      APP_MACHINE_NAME: DEVELOPER_GATEWAY
      APP_DISPLAY_NAME: Developer Gateway
      APP_ENV: LOCAL
      PORT: 80
    env_file:
      - env/common.env
      - env/rabbitmq.env
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      # - /app/node_modules
    






  # Microservices

  users-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/users/users.microservice.ts
        APP_FILE_NAME: users.microservice.js
        APP_DIR: users-ms
        APP_STATIC: 
    # command: npm run start-watch build/users.microservice.js
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: USERS_MICROSERVICE
      APP_DISPLAY_NAME: Users Microservice
      DATABASE_URL: postgres://postgres:postgres_password@users-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - users-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  authorities-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/authorities/authorities.microservice.ts
        APP_FILE_NAME: authorities.microservice.js
        APP_DIR: authorities-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: AUTHORITIES_MICROSERVICE
      APP_DISPLAY_NAME: Authorities Microservice
      DATABASE_URL: postgres://postgres:postgres_password@authorities-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - authorities-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  assets-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/assets/assets.microservice.ts
        APP_FILE_NAME: assets.microservice.js
        APP_DIR: assets-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: USERS_MICROSERVICE
      APP_DISPLAY_NAME: Users Microservice
      DATABASE_URL: postgres://postgres:postgres_password@assets-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - assets-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  items-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/items/items.microservice.ts
        APP_FILE_NAME: items.microservice.js
        APP_DIR: items-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: ITEMS_MICROSERVICE
      APP_DISPLAY_NAME: Items Microservice
      DATABASE_URL: postgres://postgres:postgres_password@items-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - items-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  storage-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/storage/storage.microservice.ts
        APP_FILE_NAME: storage.microservice.js
        APP_DIR: storage-ms
        APP_STATIC:
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: STORAGE_MICROSERVICE
      APP_DISPLAY_NAME: Storage Microservice
      DATABASE_URL: postgres://postgres:postgres_password@storage-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - storage-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  developer-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/developer/developer.microservice.ts
        APP_FILE_NAME: developer.microservice.js
        APP_DIR: developer-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: DEVELOPER_MICROSERVICE
      APP_DISPLAY_NAME: Developer Microservice
      DATABASE_URL: postgres://postgres:postgres_password@developer-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - developer-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  stripe-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/stripe/stripe.microservice.ts
        APP_FILE_NAME: stripe.microservice.js
        APP_DIR: stripe-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: STRIPE_MICROSERVICE
      APP_DISPLAY_NAME: Stripe Microservice
      DATABASE_URL: postgres://postgres:postgres_password@stripe-db:5432
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
      - stripe-db
    volumes:
      - ./src:/app/src
      # - /app/node_modules

  emails-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/emails/emails.microservice.ts
        APP_FILE_NAME: emails.microservice.js
        APP_DIR: emails-ms
        APP_STATIC: microservices/emails/static
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: EMAILS_MICROSERVICE
      APP_DISPLAY_NAME: Emails Microservice
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
    volumes:
      - ./src:/app/src
      # - /app/node_modules


  logging-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/logging/logging.microservice.ts
        APP_FILE_NAME: logging.microservice.js
        APP_DIR: logging-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: LOGGING_MICROSERVICE
      APP_DISPLAY_NAME: Logging Microservice
      APP_ENV: LOCAL
    depends_on:
      - rabbitmq
    volumes:
      - logging-ms-vol:/app/logs
      - ./src:/app/src
      # - /app/node_modules



  cache-ms:
    build:
      context: .
      dockerfile: dockerfiles/node.prod.Dockerfile
      args:
        APP_ENTRY_POINT: microservices/cache/cache.microservice.ts
        APP_FILE_NAME: cache.microservice.js
        APP_DIR: cache-ms
        APP_STATIC: 
    env_file:
      - env/common.env
      - env/rabbitmq.env
    environment:
      APP_MACHINE_NAME: CACHE_MICROSERVICE
      APP_DISPLAY_NAME: Cache Microservice
      APP_ENV: LOCAL
      REDIS_URL: redis://redis-cache?password=REDIS_PASSWORD
    depends_on:
      - rabbitmq
      - redis-cache
    volumes:
      - ./src:/app/src
      # - /app/node_modules

